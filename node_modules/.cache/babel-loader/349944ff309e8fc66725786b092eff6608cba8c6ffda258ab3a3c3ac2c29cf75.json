{"ast":null,"code":"var _jsxFileName = \"D:\\\\rotom.dex\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { supabase } from '../lib/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({});\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Get initial session\n    supabase.auth.getSession().then(({\n      data: {\n        session\n      }\n    }) => {\n      var _session$user;\n      setUser((_session$user = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user !== void 0 ? _session$user : null);\n      setLoading(false);\n    });\n\n    // Listen for auth changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      var _session$user2;\n      setUser((_session$user2 = session === null || session === void 0 ? void 0 : session.user) !== null && _session$user2 !== void 0 ? _session$user2 : null);\n      setLoading(false);\n    });\n    return () => subscription.unsubscribe();\n  }, []);\n  const signUp = async (email, password, userData) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signUp({\n        email,\n        password\n      });\n      if (error) throw error;\n      if (data.user) {\n        // Insert user data into User table\n        const {\n          error: insertError\n        } = await supabase.from('User').insert([{\n          email: email,\n          username: userData.username,\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          country: userData.country,\n          reg_date: new Date().toISOString(),\n          money_amount: 1000,\n          is_admin: false,\n          is_active: true,\n          password: 'hashed' // In production, password should be hashed\n        }]);\n        if (insertError) throw insertError;\n      }\n      return {\n        data,\n        error: null\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n  const signIn = async (email, password) => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      return {\n        data,\n        error\n      };\n    } catch (error) {\n      return {\n        data: null,\n        error\n      };\n    }\n  };\n  const signOut = async () => {\n    const {\n      error\n    } = await supabase.auth.signOut();\n    return {\n      error\n    };\n  };\n  const value = {\n    user,\n    signUp,\n    signIn,\n    signOut,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","auth","getSession","then","data","session","_session$user","subscription","onAuthStateChange","event","_session$user2","unsubscribe","signUp","email","password","userData","error","insertError","from","insert","username","first_name","firstName","last_name","lastName","country","reg_date","Date","toISOString","money_amount","is_admin","is_active","signIn","signInWithPassword","signOut","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/rotom.dex/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react'\r\nimport { supabase } from '../lib/supabase'\r\n\r\nconst AuthContext = createContext({})\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext)\r\n}\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null)\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  useEffect(() => {\r\n    // Get initial session\r\n    supabase.auth.getSession().then(({ data: { session } }) => {\r\n      setUser(session?.user ?? null)\r\n      setLoading(false)\r\n    })\r\n\r\n    // Listen for auth changes\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\r\n      async (event, session) => {\r\n        setUser(session?.user ?? null)\r\n        setLoading(false)\r\n      }\r\n    )\r\n\r\n    return () => subscription.unsubscribe()\r\n  }, [])\r\n\r\n  const signUp = async (email, password, userData) => {\r\n    try {\r\n      const { data, error } = await supabase.auth.signUp({\r\n        email,\r\n        password\r\n      })\r\n\r\n      if (error) throw error\r\n\r\n      if (data.user) {\r\n        // Insert user data into User table\r\n        const { error: insertError } = await supabase\r\n          .from('User')\r\n          .insert([{\r\n            email: email,\r\n            username: userData.username,\r\n            first_name: userData.firstName,\r\n            last_name: userData.lastName,\r\n            country: userData.country,\r\n            reg_date: new Date().toISOString(),\r\n            money_amount: 1000,\r\n            is_admin: false,\r\n            is_active: true,\r\n            password: 'hashed' // In production, password should be hashed\r\n          }])\r\n\r\n        if (insertError) throw insertError\r\n      }\r\n\r\n      return { data, error: null }\r\n    } catch (error) {\r\n      return { data: null, error }\r\n    }\r\n  }\r\n\r\n  const signIn = async (email, password) => {\r\n    try {\r\n      const { data, error } = await supabase.auth.signInWithPassword({\r\n        email,\r\n        password\r\n      })\r\n      return { data, error }\r\n    } catch (error) {\r\n      return { data: null, error }\r\n    }\r\n  }\r\n\r\n  const signOut = async () => {\r\n    const { error } = await supabase.auth.signOut()\r\n    return { error }\r\n  }\r\n\r\n  const value = {\r\n    user,\r\n    signUp,\r\n    signIn,\r\n    signOut,\r\n    loading\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  )\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}